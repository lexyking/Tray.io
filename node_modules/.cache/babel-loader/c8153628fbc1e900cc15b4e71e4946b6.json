{"ast":null,"code":"'use strict'; // Load modules\n\nconst Any = require('../any');\n\nconst Ref = require('../../ref');\n\nconst Hoek = require('hoek'); // Declare internals\n\n\nconst internals = {\n  precisionRx: /(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/,\n\n  normalizeExponent(str) {\n    return str.replace(/\\.?0+e/, 'e').replace(/e\\+/, 'e').replace(/^\\+/, '').replace(/^(-?)0+([1-9])/, '$1$2');\n  },\n\n  normalizeDecimal(str) {\n    str = str.replace(/^\\+/, '').replace(/\\.0+$/, '').replace(/^(-?)0+([1-9])/, '$1$2');\n\n    if (str.includes('.') && str.endsWith('0')) {\n      str = str.replace(/0+$/, '');\n    }\n\n    return str;\n  }\n\n};\ninternals.Number = class extends Any {\n  constructor() {\n    super();\n    this._type = 'number';\n    this._flags.unsafe = false;\n\n    this._invalids.add(Infinity);\n\n    this._invalids.add(-Infinity);\n  }\n\n  _base(value, state, options) {\n    const result = {\n      errors: null,\n      value\n    };\n\n    if (typeof value === 'string' && options.convert) {\n      const matches = value.match(/^\\s*[+-]?\\d+(?:\\.\\d+)?(?:e([+-]?\\d+))?\\s*$/i);\n\n      if (matches) {\n        value = value.trim();\n        result.value = parseFloat(value);\n\n        if (!this._flags.unsafe) {\n          if (value.includes('e')) {\n            if (internals.normalizeExponent(\"\".concat(result.value / Math.pow(10, matches[1]), \"e\").concat(matches[1])) !== internals.normalizeExponent(value)) {\n              result.errors = this.createError('number.unsafe', {\n                value\n              }, state, options);\n              return result;\n            }\n          } else {\n            if (result.value.toString() !== internals.normalizeDecimal(value)) {\n              result.errors = this.createError('number.unsafe', {\n                value\n              }, state, options);\n              return result;\n            }\n          }\n        }\n      }\n    }\n\n    const isNumber = typeof result.value === 'number' && !isNaN(result.value);\n\n    if (options.convert && 'precision' in this._flags && isNumber) {\n      // This is conceptually equivalent to using toFixed but it should be much faster\n      const precision = Math.pow(10, this._flags.precision);\n      result.value = Math.round(result.value * precision) / precision;\n    }\n\n    if (isNumber) {\n      if (!this._flags.unsafe && (value > Number.MAX_SAFE_INTEGER || value < Number.MIN_SAFE_INTEGER)) {\n        result.errors = this.createError('number.unsafe', {\n          value\n        }, state, options);\n      }\n    } else {\n      result.errors = this.createError('number.base', {\n        value\n      }, state, options);\n    }\n\n    return result;\n  }\n\n  multiple(base) {\n    const isRef = Ref.isRef(base);\n\n    if (!isRef) {\n      Hoek.assert(typeof base === 'number' && isFinite(base), 'multiple must be a number');\n      Hoek.assert(base > 0, 'multiple must be greater than 0');\n    }\n\n    return this._test('multiple', base, function (value, state, options) {\n      const divisor = isRef ? base(state.reference || state.parent, options) : base;\n\n      if (isRef && (typeof divisor !== 'number' || !isFinite(divisor))) {\n        return this.createError('number.ref', {\n          ref: base.key\n        }, state, options);\n      }\n\n      if (value % divisor === 0) {\n        return value;\n      }\n\n      return this.createError('number.multiple', {\n        multiple: base,\n        value\n      }, state, options);\n    });\n  }\n\n  integer() {\n    return this._test('integer', undefined, function (value, state, options) {\n      return Math.trunc(value) - value === 0 ? value : this.createError('number.integer', {\n        value\n      }, state, options);\n    });\n  }\n\n  unsafe(enabled = true) {\n    Hoek.assert(typeof enabled === 'boolean', 'enabled must be a boolean');\n\n    if (this._flags.unsafe === enabled) {\n      return this;\n    }\n\n    const obj = this.clone();\n    obj._flags.unsafe = enabled;\n    return obj;\n  }\n\n  negative() {\n    return this._test('negative', undefined, function (value, state, options) {\n      if (value < 0) {\n        return value;\n      }\n\n      return this.createError('number.negative', {\n        value\n      }, state, options);\n    });\n  }\n\n  positive() {\n    return this._test('positive', undefined, function (value, state, options) {\n      if (value > 0) {\n        return value;\n      }\n\n      return this.createError('number.positive', {\n        value\n      }, state, options);\n    });\n  }\n\n  precision(limit) {\n    Hoek.assert(Number.isSafeInteger(limit), 'limit must be an integer');\n    Hoek.assert(!('precision' in this._flags), 'precision already set');\n\n    const obj = this._test('precision', limit, function (value, state, options) {\n      const places = value.toString().match(internals.precisionRx);\n      const decimals = Math.max((places[1] ? places[1].length : 0) - (places[2] ? parseInt(places[2], 10) : 0), 0);\n\n      if (decimals <= limit) {\n        return value;\n      }\n\n      return this.createError('number.precision', {\n        limit,\n        value\n      }, state, options);\n    });\n\n    obj._flags.precision = limit;\n    return obj;\n  }\n\n  port() {\n    return this._test('port', undefined, function (value, state, options) {\n      if (!Number.isSafeInteger(value) || value < 0 || value > 65535) {\n        return this.createError('number.port', {\n          value\n        }, state, options);\n      }\n\n      return value;\n    });\n  }\n\n};\n\ninternals.compare = function (type, compare) {\n  return function (limit) {\n    const isRef = Ref.isRef(limit);\n    const isNumber = typeof limit === 'number' && !isNaN(limit);\n    Hoek.assert(isNumber || isRef, 'limit must be a number or reference');\n    return this._test(type, limit, function (value, state, options) {\n      let compareTo;\n\n      if (isRef) {\n        compareTo = limit(state.reference || state.parent, options);\n\n        if (!(typeof compareTo === 'number' && !isNaN(compareTo))) {\n          return this.createError('number.ref', {\n            ref: limit.key\n          }, state, options);\n        }\n      } else {\n        compareTo = limit;\n      }\n\n      if (compare(value, compareTo)) {\n        return value;\n      }\n\n      return this.createError('number.' + type, {\n        limit: compareTo,\n        value\n      }, state, options);\n    });\n  };\n};\n\ninternals.Number.prototype.min = internals.compare('min', (value, limit) => value >= limit);\ninternals.Number.prototype.max = internals.compare('max', (value, limit) => value <= limit);\ninternals.Number.prototype.greater = internals.compare('greater', (value, limit) => value > limit);\ninternals.Number.prototype.less = internals.compare('less', (value, limit) => value < limit);\nmodule.exports = new internals.Number();","map":null,"metadata":{},"sourceType":"script"}