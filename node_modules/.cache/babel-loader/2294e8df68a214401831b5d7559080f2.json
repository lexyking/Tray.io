{"ast":null,"code":"'use strict'; // Load modules\n\nconst Any = require('../any');\n\nconst Hoek = require('hoek'); // Declare internals\n\n\nconst internals = {};\ninternals.Lazy = class extends Any {\n  constructor() {\n    super();\n    this._type = 'lazy';\n    this._flags.once = true;\n    this._cache = null;\n  }\n\n  _init(fn, options) {\n    return this.set(fn, options);\n  }\n\n  _base(value, state, options) {\n    let schema;\n\n    if (this._cache) {\n      schema = this._cache;\n    } else {\n      const result = {\n        value\n      };\n      const lazy = this._flags.lazy;\n\n      if (!lazy) {\n        result.errors = this.createError('lazy.base', null, state, options);\n        return result;\n      }\n\n      schema = lazy();\n\n      if (!(schema instanceof Any)) {\n        result.errors = this.createError('lazy.schema', {\n          schema\n        }, state, options);\n        return result;\n      }\n\n      if (this._flags.once) {\n        this._cache = schema;\n      }\n    }\n\n    return schema._validate(value, state, options);\n  }\n\n  set(fn, options) {\n    Hoek.assert(typeof fn === 'function', 'You must provide a function as first argument');\n    Hoek.assert(options === undefined || options && typeof options === 'object' && !Array.isArray(options), \"Options must be an object\");\n\n    if (options) {\n      const unknownOptions = Object.keys(options).filter(key => !['once'].includes(key));\n      Hoek.assert(unknownOptions.length === 0, \"Options contain unknown keys: \".concat(unknownOptions));\n      Hoek.assert(options.once === undefined || typeof options.once === 'boolean', 'Option \"once\" must be a boolean');\n    }\n\n    const obj = this.clone();\n    obj._flags.lazy = fn;\n\n    if (options && options.once !== obj._flags.once) {\n      obj._flags.once = options.once;\n    }\n\n    return obj;\n  }\n\n};\nmodule.exports = new internals.Lazy();","map":null,"metadata":{},"sourceType":"script"}