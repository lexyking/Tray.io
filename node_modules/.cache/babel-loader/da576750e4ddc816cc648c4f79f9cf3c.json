{"ast":null,"code":"'use strict'; // Load modules\n// Declare internals\n\nvar _slicedToArray = require(\"/home/cyf/Repos/trayio/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nconst internals = {\n  arrayType: Symbol('array'),\n  bufferType: Symbol('buffer'),\n  dateType: Symbol('date'),\n  errorType: Symbol('error'),\n  genericType: Symbol('generic'),\n  mapType: Symbol('map'),\n  regexType: Symbol('regex'),\n  setType: Symbol('set'),\n  weakMapType: Symbol('weak-map'),\n  weakSetType: Symbol('weak-set'),\n  mismatched: Symbol('mismatched')\n};\ninternals.typeMap = {\n  '[object Array]': internals.arrayType,\n  '[object Date]': internals.dateType,\n  '[object Error]': internals.errorType,\n  '[object Map]': internals.mapType,\n  '[object RegExp]': internals.regexType,\n  '[object Set]': internals.setType,\n  '[object WeakMap]': internals.weakMapType,\n  '[object WeakSet]': internals.weakSetType\n};\ninternals.SeenEntry = class {\n  constructor(obj, ref) {\n    this.obj = obj;\n    this.ref = ref;\n  }\n\n  isSame(obj, ref) {\n    return this.obj === obj && this.ref === ref;\n  }\n\n};\n\ninternals.getInternalType = function (obj) {\n  const typeMap = internals.typeMap,\n        bufferType = internals.bufferType,\n        genericType = internals.genericType;\n\n  if (obj instanceof Buffer) {\n    return bufferType;\n  }\n\n  const objName = Object.prototype.toString.call(obj);\n  return typeMap[objName] || genericType;\n};\n\ninternals.getSharedType = function (obj, ref, checkPrototype) {\n  if (checkPrototype) {\n    if (Object.getPrototypeOf(obj) !== Object.getPrototypeOf(ref)) {\n      return internals.mismatched;\n    }\n\n    return internals.getInternalType(obj);\n  }\n\n  const type = internals.getInternalType(obj);\n\n  if (type !== internals.getInternalType(ref)) {\n    return internals.mismatched;\n  }\n\n  return type;\n};\n\ninternals.valueOf = function (obj) {\n  const objValueOf = obj.valueOf;\n\n  if (objValueOf === undefined) {\n    return obj;\n  }\n\n  try {\n    return objValueOf.call(obj);\n  } catch (err) {\n    return err;\n  }\n};\n\ninternals.hasOwnEnumerableProperty = function (obj, key) {\n  return Object.prototype.propertyIsEnumerable.call(obj, key);\n};\n\ninternals.isSetSimpleEqual = function (obj, ref) {\n  for (const entry of obj) {\n    if (!ref.has(entry)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\ninternals.isDeepEqualObj = function (instanceType, obj, ref, options, seen) {\n  const isDeepEqual = internals.isDeepEqual,\n        valueOf = internals.valueOf,\n        hasOwnEnumerableProperty = internals.hasOwnEnumerableProperty;\n  const keys = Object.keys,\n        getOwnPropertySymbols = Object.getOwnPropertySymbols;\n\n  if (instanceType === internals.arrayType) {\n    if (options.part) {\n      // Check if any index match any other index\n      for (let i = 0; i < obj.length; ++i) {\n        const objValue = obj[i];\n\n        for (let j = 0; j < ref.length; ++j) {\n          if (isDeepEqual(objValue, ref[j], options, seen)) {\n            return true;\n          }\n        }\n      }\n    } else {\n      if (obj.length !== ref.length) {\n        return false;\n      }\n\n      for (let i = 0; i < obj.length; ++i) {\n        if (!isDeepEqual(obj[i], ref[i], options, seen)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  } else if (instanceType === internals.setType) {\n    if (obj.size !== ref.size) {\n      return false;\n    }\n\n    if (!internals.isSetSimpleEqual(obj, ref)) {\n      // Check for deep equality\n      const ref2 = new Set(ref);\n\n      for (const objEntry of obj) {\n        if (ref2.delete(objEntry)) {\n          continue;\n        }\n\n        let found = false;\n\n        for (const refEntry of ref2) {\n          if (isDeepEqual(objEntry, refEntry, options, seen)) {\n            ref2.delete(refEntry);\n            found = true;\n            break;\n          }\n        }\n\n        if (!found) {\n          return false;\n        }\n      }\n    }\n  } else if (instanceType === internals.mapType) {\n    if (obj.size !== ref.size) {\n      return false;\n    }\n\n    for (const _ref of obj) {\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      const key = _ref2[0];\n      const value = _ref2[1];\n\n      if (value === undefined && !ref.has(key)) {\n        return false;\n      }\n\n      if (!isDeepEqual(value, ref.get(key), options, seen)) {\n        return false;\n      }\n    }\n  } else if (instanceType === internals.errorType) {\n    // Always check name and message\n    if (obj.name !== ref.name || obj.message !== ref.message) {\n      return false;\n    }\n  } // Check .valueOf()\n\n\n  const valueOfObj = valueOf(obj);\n  const valueOfRef = valueOf(ref);\n\n  if (!(obj === valueOfObj && ref === valueOfRef) && !isDeepEqual(valueOfObj, valueOfRef, options, seen)) {\n    return false;\n  } // Check properties\n\n\n  const objKeys = keys(obj);\n\n  if (!options.part && objKeys.length !== keys(ref).length) {\n    return false;\n  }\n\n  for (let i = 0; i < objKeys.length; ++i) {\n    const key = objKeys[i];\n\n    if (!hasOwnEnumerableProperty(ref, key)) {\n      return false;\n    }\n\n    if (!isDeepEqual(obj[key], ref[key], options, seen)) {\n      return false;\n    }\n  } // Check symbols\n\n\n  if (options.symbols) {\n    const objSymbols = getOwnPropertySymbols(obj);\n    const refSymbols = new Set(getOwnPropertySymbols(ref));\n\n    for (let i = 0; i < objSymbols.length; ++i) {\n      const key = objSymbols[i];\n\n      if (hasOwnEnumerableProperty(obj, key)) {\n        if (!hasOwnEnumerableProperty(ref, key)) {\n          return false;\n        }\n\n        if (!isDeepEqual(obj[key], ref[key], options, seen)) {\n          return false;\n        }\n      } else if (hasOwnEnumerableProperty(ref, key)) {\n        return false;\n      }\n\n      refSymbols.delete(key);\n    }\n\n    for (const key of refSymbols) {\n      if (hasOwnEnumerableProperty(ref, key)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\ninternals.isDeepEqual = function (obj, ref, options, seen) {\n  if (obj === ref) {\n    // Copied from Deep-eql, copyright(c) 2013 Jake Luer, jake@alogicalparadox.com, MIT Licensed, https://github.com/chaijs/deep-eql\n    return obj !== 0 || 1 / obj === 1 / ref;\n  }\n\n  const type = typeof obj;\n\n  if (type !== typeof ref) {\n    return false;\n  }\n\n  if (type !== 'object' || obj === null || ref === null) {\n    return obj !== obj && ref !== ref; // NaN\n  }\n\n  const instanceType = internals.getSharedType(obj, ref, !!options.prototype);\n\n  switch (instanceType) {\n    case internals.bufferType:\n      return Buffer.prototype.equals.call(obj, ref);\n\n    case internals.regexType:\n      return obj.toString() === ref.toString();\n\n    case internals.mismatched:\n      return false;\n  }\n\n  for (let i = seen.length - 1; i >= 0; --i) {\n    if (seen[i].isSame(obj, ref)) {\n      return true; // If previous comparison failed, it would have stopped execution\n    }\n  }\n\n  seen.push(new internals.SeenEntry(obj, ref));\n\n  try {\n    return !!internals.isDeepEqualObj(instanceType, obj, ref, options, seen);\n  } finally {\n    seen.pop();\n  }\n};\n\nmodule.exports = function (obj, ref, options) {\n  options = options || {\n    prototype: true\n  };\n  return !!internals.isDeepEqual(obj, ref, options, []);\n};","map":null,"metadata":{},"sourceType":"script"}