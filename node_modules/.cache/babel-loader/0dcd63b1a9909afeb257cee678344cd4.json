{"ast":null,"code":"'use strict'; // Load modules\n\nvar _slicedToArray = require(\"/home/cyf/Repos/trayio/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nconst Util = require('util');\n\nconst Any = require('../any');\n\nconst Hoek = require('hoek'); // Declare internals\n\n\nconst internals = {};\ninternals.Map = class extends Map {\n  slice() {\n    return new internals.Map(this);\n  }\n\n  toString() {\n    return Util.inspect(this);\n  }\n\n};\ninternals.Symbol = class extends Any {\n  constructor() {\n    super();\n    this._type = 'symbol';\n    this._inner.map = new internals.Map();\n  }\n\n  _base(value, state, options) {\n    if (options.convert) {\n      const lookup = this._inner.map.get(value);\n\n      if (lookup) {\n        value = lookup;\n      }\n\n      if (this._flags.allowOnly) {\n        return {\n          value,\n          errors: typeof value === 'symbol' ? null : this.createError('symbol.map', {\n            value,\n            map: this._inner.map\n          }, state, options)\n        };\n      }\n    }\n\n    return {\n      value,\n      errors: typeof value === 'symbol' ? null : this.createError('symbol.base', {\n        value\n      }, state, options)\n    };\n  }\n\n  map(iterable) {\n    if (iterable && !iterable[Symbol.iterator] && typeof iterable === 'object') {\n      iterable = Object.entries(iterable);\n    }\n\n    Hoek.assert(iterable && iterable[Symbol.iterator], 'Iterable must be an iterable or object');\n    const obj = this.clone();\n    const symbols = [];\n\n    for (const entry of iterable) {\n      Hoek.assert(entry && entry[Symbol.iterator], 'Entry must be an iterable');\n\n      const _entry = _slicedToArray(entry, 2),\n            key = _entry[0],\n            value = _entry[1];\n\n      Hoek.assert(typeof key !== 'object' && typeof key !== 'function' && typeof key !== 'symbol', 'Key must not be an object, function, or Symbol');\n      Hoek.assert(typeof value === 'symbol', 'Value must be a Symbol');\n\n      obj._inner.map.set(key, value);\n\n      symbols.push(value);\n    }\n\n    return obj.valid(...symbols);\n  }\n\n  describe() {\n    const description = super.describe();\n    description.map = new Map(this._inner.map);\n    return description;\n  }\n\n};\nmodule.exports = new internals.Symbol();","map":null,"metadata":{},"sourceType":"script"}