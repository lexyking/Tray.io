{"ast":null,"code":"'use strict'; // Load modules\n\nconst Hoek = require('hoek');\n\nconst ObjectType = require('../object');\n\nconst Ref = require('../../ref'); // Declare internals\n\n\nconst internals = {};\ninternals.Func = class extends ObjectType.constructor {\n  constructor() {\n    super();\n    this._flags.func = true;\n  }\n\n  arity(n) {\n    Hoek.assert(Number.isSafeInteger(n) && n >= 0, 'n must be a positive integer');\n    return this._test('arity', n, function (value, state, options) {\n      if (value.length === n) {\n        return value;\n      }\n\n      return this.createError('function.arity', {\n        n\n      }, state, options);\n    });\n  }\n\n  minArity(n) {\n    Hoek.assert(Number.isSafeInteger(n) && n > 0, 'n must be a strict positive integer');\n    return this._test('minArity', n, function (value, state, options) {\n      if (value.length >= n) {\n        return value;\n      }\n\n      return this.createError('function.minArity', {\n        n\n      }, state, options);\n    });\n  }\n\n  maxArity(n) {\n    Hoek.assert(Number.isSafeInteger(n) && n >= 0, 'n must be a positive integer');\n    return this._test('maxArity', n, function (value, state, options) {\n      if (value.length <= n) {\n        return value;\n      }\n\n      return this.createError('function.maxArity', {\n        n\n      }, state, options);\n    });\n  }\n\n  ref() {\n    return this._test('ref', null, function (value, state, options) {\n      if (Ref.isRef(value)) {\n        return value;\n      }\n\n      return this.createError('function.ref', {\n        value\n      }, state, options);\n    });\n  }\n\n  class() {\n    return this._test('class', null, function (value, state, options) {\n      if (/^\\s*class\\s/.test(value.toString())) {\n        return value;\n      }\n\n      return this.createError('function.class', {\n        value\n      }, state, options);\n    });\n  }\n\n};\nmodule.exports = new internals.Func();","map":null,"metadata":{},"sourceType":"script"}