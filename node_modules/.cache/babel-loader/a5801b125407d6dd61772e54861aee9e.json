{"ast":null,"code":"'use strict'; // Load modules\n\nconst Any = require('../any');\n\nconst Hoek = require('hoek'); // Declare internals\n\n\nconst internals = {\n  Set: require('../../set')\n};\ninternals.Boolean = class extends Any {\n  constructor() {\n    super();\n    this._type = 'boolean';\n    this._flags.insensitive = true;\n    this._inner.truthySet = new internals.Set();\n    this._inner.falsySet = new internals.Set();\n  }\n\n  _base(value, state, options) {\n    const result = {\n      value\n    };\n\n    if (typeof value === 'string' && options.convert) {\n      const normalized = this._flags.insensitive ? value.toLowerCase() : value;\n      result.value = normalized === 'true' ? true : normalized === 'false' ? false : value;\n    }\n\n    if (typeof result.value !== 'boolean') {\n      result.value = this._inner.truthySet.has(value, null, null, this._flags.insensitive) ? true : this._inner.falsySet.has(value, null, null, this._flags.insensitive) ? false : value;\n    }\n\n    result.errors = typeof result.value === 'boolean' ? null : this.createError('boolean.base', {\n      value\n    }, state, options);\n    return result;\n  }\n\n  truthy(...values) {\n    const obj = this.clone();\n    values = Hoek.flatten(values);\n\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      Hoek.assert(value !== undefined, 'Cannot call truthy with undefined');\n\n      obj._inner.truthySet.add(value);\n    }\n\n    return obj;\n  }\n\n  falsy(...values) {\n    const obj = this.clone();\n    values = Hoek.flatten(values);\n\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      Hoek.assert(value !== undefined, 'Cannot call falsy with undefined');\n\n      obj._inner.falsySet.add(value);\n    }\n\n    return obj;\n  }\n\n  insensitive(enabled) {\n    const insensitive = enabled === undefined ? true : !!enabled;\n\n    if (this._flags.insensitive === insensitive) {\n      return this;\n    }\n\n    const obj = this.clone();\n    obj._flags.insensitive = insensitive;\n    return obj;\n  }\n\n  describe() {\n    const description = super.describe();\n    description.truthy = [true, ...this._inner.truthySet.values()];\n    description.falsy = [false, ...this._inner.falsySet.values()];\n    return description;\n  }\n\n};\nmodule.exports = new internals.Boolean();","map":null,"metadata":{},"sourceType":"script"}